// Ex1a
var NUMBER_OF_PEOPLE = 23;

var collidingBirthdays = function(i) {
  if (i==0) { return false; }
  var day = sample(Uniform({a:0,b:364}));
  if (day < NUMBER_OF_PEOPLE-i) {
    return true;
  } else {
    return collidingBirthdays(i-1);
  }
}

var birthdays = function() {
  var x = collidingBirthdays(NUMBER_OF_PEOPLE);
  return x;
  
}

var dist = Infer(
  {method: 'rejection', samples: 2000},
  birthdays);

viz.auto(dist);





// Ex2
var pickNumber = function() {
  return sample(RandomInteger({n:10}))
}

var isWinning = function(a, b) {
  return a + b == 13
}

var secondWinning = function(a, b) {
  return a + b > 8
}

var pickSecondNumber = function(firstNumber) {
  if (firstNumber > 8) {
    //no chance of guessing the correct number. just pick randomly.
    return pickNumber()
  } else {
    var lowerBound = 9 - firstNumber
    return sample(Uniform({a: lowerBound, b: 9}))
  }
}

var pickNumbers2 = function(howManyTimes) {
  if (howManyTimes == 0) return []
  else {
    var x = pickNumber()
    var y = pickSecondNumber(x)
    
    var rec = pickNumbers2(howManyTimes-1)
    
    if (isWinning(x, y)) {
      return rec.concat([x])
    } else {
      return rec
    }
  }
}

viz.auto(pickNumbers2(10000))
//should produce a bar-chart, whethere the number with most successes has the highest bar.
//this doesn't seem to work correctly.. :/



/* 3a
 */
var performTest = function(type) {
  //Apparently I cannot use 'switch' in WebPPL. stupid program.
  if (type == 'normal') {
    return flip(0.66) ? 'true' : 'false'
  } else if (type == 'rigorous') {
    return flip(0.33) ? 'true' : 'false'
  } else {
    return 'unknown'
  }
} 

var testProduct = function(id) {
  if (id == 0) {
    var outcome = performTest(flip(0.5) ? 'normal' : 'rigorous')
    return {outcome: outcome,
            totalFalses: outcome == 'false' ? 1 : 0,
            totalTrues: outcome == 'true' ? 1 : 0}
  } else {
    var previousTest = testProduct(id - 1)
    if (previousTest.outcome == 'true' || previousTest.outcome == 'false') {
      var newOutcome = performTest(previousTest.outcome == 'true' ? 'rigorous' : 'normal')
      var thisTest = {outcome: newOutcome,
              totalFalses: previousTest.totalFalses + (newOutcome == 'false' ? 1 : 0),
              totalTrues: previousTest.totalTrues + (newOutcome == 'true' ? 1 : 0)}

      condition(thisTest.totalTrues < 7)
      condition(thisTest.totalFalses > 0)
      
      return thisTest;
    } else {
      return previousTest //previous test outcome was not 'false' or 'true'. should not occur.
    }
  }
}

var products = function() {
  return testProduct(10).outcome
}

var dist = Infer(
  {method: 'enumerate', maxExecutions: 10000},
  products);

viz.auto(dist);

/* 3b
 * 
 * Changed the testProduct function to return an object {outcome, totalFalses, totalTrues}
 * so that we can condition on the total number of occurences of true/false.
 * I'm guessing there's a prettier way to do this, but this solution works for now.
 */